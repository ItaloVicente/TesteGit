/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author super
 */
public class AvaliarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form AvaliarConsulta
     */
    public AvaliarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dataRelatorioTxt = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(868, 630));
        setMinimumSize(new java.awt.Dimension(868, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jtConsultas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medico", "Data", "Hora"
            }
        ));
        jtConsultas.getTableHeader().setResizingAllowed(false);
        jtConsultas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtConsultas);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(60, 170, 738, 380);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("SISTEMA DE AVALICAO DE CONSULTAS REALIZADAS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(240, 10, 376, 22);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(300, 560, 72, 23);

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(550, 560, 76, 23);

        jLabel2.setText("Digite a data da consulta que deseja avaliar: (formato dd/mm/aaaa)");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(180, 60, 384, 16);
        getContentPane().add(dataRelatorioTxt);
        dataRelatorioTxt.setBounds(560, 60, 116, 22);

        jButton3.setText("Pesquisar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(420, 560, 80, 23);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 870, 750);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        PosLogin frame = new PosLogin();
        frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String json = "";
        int index=0;
        DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
        int row = jtConsultas.getSelectedRow();
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Paciente paciente = gson.fromJson(json, Paciente.class);
        }
        catch (IOException ex) {
            Logger.getLogger(PosLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        for(Medico medico:medicos){
            String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
            String data  = (String) dtmConsultas.getValueAt(row,1);
            String horario = (String) dtmConsultas.getValueAt(row, 2);
            if(medico.getNome().equals(nomeMedico)){
                String notaS = JOptionPane.showInputDialog("Avalizacao do atendimento");
                double nota = Double.parseDouble(notaS);
                medico.adicionarNota(nota);
            }
        }
        Paciente pacienteUsuario = new Paciente("","","","");
        String json3 = "";
        try {
            json3 = String.join(" ",Files.readAllLines(Paths.get("pacientes.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypePaciente = new TypeToken <ArrayList<Paciente>>(){}.getType();
        ArrayList<Paciente> pacientes = gson.fromJson(json3,listTypePaciente);
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        for(int x = 0; x<pacientes.size();x++){
            Paciente paciente = pacientes.get(x);
            ArrayList<Consulta> consultas = paciente.getAvaliarConsultas();
            for(int i =0;i<consultas.size();i++){
                Consulta consulta = consultas.get(i);
                String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
                String data  = (String) dtmConsultas.getValueAt(row,1);
                String horario = (String) dtmConsultas.getValueAt(row, 2);
                if(consulta.getNomeMedico().equals(nomeMedico)&&
                        consulta.getData().equals(data)&&
                        consulta.getHorario().equals(horario)){
                    System.out.println("entrou");
                    pacientes.remove(index);
                    paciente.removerAvailarConsulta(consulta);
                    paciente.addConsultaRealizada(consulta);
                    pacientes.add(paciente);
                    pacienteUsuario = paciente;
                    
                }
            }
            index=index+1;
        }
        Writer writer = null;
        try{
            writer=new FileWriter("medicos.json");
            gson.toJson(medicos,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        try{
            writer=new FileWriter("pacientes.json");
            gson.toJson(pacientes,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        try{
            writer = new FileWriter("usuario.json");
            gson.toJson(pacienteUsuario,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        int index5 = table.getRowCount();
        for(int x=0;x<index5;x++){
            System.out.println(x);
            table.removeRow(0);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index5 = table.getRowCount();
        for(int x=0;x<index5;x++){
            System.out.println(x);
            table.removeRow(0);
        }
        String json = "";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Paciente paciente = gson.fromJson(json, Paciente.class);
            for(int i =0;i<paciente.getAvaliarConsultas().size();i++){
                Consulta consulta = paciente.getAvaliarConsultas().get(i);
                if(consulta.getData().equals(dataRelatorioTxt.getText())){
                DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                Object[] dados = {consulta.getNomeMedico(),consulta.getData(),consulta.getHorario()};
                dtmConsultas.addRow(dados);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(PosLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String json = "";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Paciente paciente = gson.fromJson(json, Paciente.class);
            for(int i =0;i<paciente.getAvaliarConsultas().size();i++){
                Consulta consulta = paciente.getAvaliarConsultas().get(i);
                DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                Object[] dados = {consulta.getNomeMedico(),consulta.getData(),consulta.getHorario()};
                dtmConsultas.addRow(dados);
            }
        } catch (IOException ex) {
            Logger.getLogger(PosLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvaliarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvaliarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvaliarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvaliarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AvaliarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dataRelatorioTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    // End of variables declaration//GEN-END:variables
}
