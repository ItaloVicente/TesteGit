/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author super
 */
public class AgendarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form AgendarConsulta
     */
    public AgendarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        pesquisaTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dataTxt = new javax.swing.JTextField();
        chxHora = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agendar Consulta");
        setMaximumSize(new java.awt.Dimension(881, 630));
        setMinimumSize(new java.awt.Dimension(881, 630));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("SISTEMA DE AGENDAMENTO MEDICO");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(350, 10, 366, 70);

        jtConsultas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medico", "Especialidade", "Avaliacao"
            }
        ));
        jtConsultas.getTableHeader().setResizingAllowed(false);
        jtConsultas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtConsultas);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 200, 752, 296);

        jLabel2.setText("Pesquise por Nome ou Especialidade:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(240, 80, 214, 16);
        getContentPane().add(pesquisaTxt);
        pesquisaTxt.setBounds(470, 80, 202, 22);

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(680, 80, 93, 23);

        jButton2.setText("Agendar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(240, 510, 80, 23);

        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(520, 510, 76, 23);

        jLabel3.setText("Digite a data que deseja agendar: (formato dd/mm/aaaa)");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(240, 110, 323, 16);

        jLabel4.setText("Escolha a hora:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(240, 140, 101, 16);
        getContentPane().add(dataTxt);
        dataTxt.setBounds(560, 110, 114, 22);

        chxHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00h", "9:00h", "10:00h", "11:00h" }));
        getContentPane().add(chxHora);
        chxHora.setBounds(560, 140, 114, 22);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(1077, 756));
        jLabel5.setMinimumSize(new java.awt.Dimension(1077, 756));
        getContentPane().add(jLabel5);
        jLabel5.setBounds(0, -70, 1080, 880);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        for(Medico medico: medicos){
            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
            Object[] dados = {medico.getNome(),medico.getEspecialidade(),medico.calcularMedia()};
            dtmConsultas.addRow(dados);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        PosLogin frame = new PosLogin();
        frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index5 = table.getRowCount();
        for(int x=0;x<index5;x++){
            System.out.println(x);
            table.removeRow(0);
        }
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        for(Medico medico: medicos){
            String nomeMedico = medico.getNome();
            String especialidadeMedico = medico.getEspecialidade();
            if(nomeMedico.equals(pesquisaTxt.getText().toUpperCase())||especialidadeMedico.equals(pesquisaTxt.getText().toUpperCase())){
                DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                Object[] dados = {medico.getNome(),medico.getEspecialidade(),medico.calcularMedia()};
                dtmConsultas.addRow(dados);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        String json = "";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        Paciente paciente = new Paciente("","","","");
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            paciente = gson.fromJson(json, Paciente.class);
        }catch(Exception e){
            e.getMessage();
        }
        int row = jtConsultas.getSelectedRow();
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
        String hora = (String) chxHora.getSelectedItem();
        String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
        String especialidadeMedico= (String) dtmConsultas.getValueAt(row, 1);
        int index=0;
        String json3 = "";
        String data = dataTxt.getText();
        String[] vetorData = data.split("(?!^)");
        if(vetorData.length!=10){
            JOptionPane.showMessageDialog(null, "Ola, datas inseridas invalidas");
        }
        else{
        try {
            json3 = String.join(" ",Files.readAllLines(Paths.get("pacientes.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypePaciente = new TypeToken <ArrayList<Paciente>>(){}.getType();
        ArrayList<Paciente> pacientes = gson.fromJson(json3,listTypePaciente);
        for(Medico medico:medicos){
            if(medico.getNome().equals(nomeMedico)&&medico.getEspecialidade().equals(especialidadeMedico)){
            ArrayList<Consulta> consultas = medico.getConsultas();
            ArrayList<Consulta> consultasMesmoDia = new ArrayList<>();
            ArrayList<Consulta> consultasNovoDia = new ArrayList<>();
            for(Consulta consulta: consultas){
                if(data.equals(consulta.getData())){
                    consultasMesmoDia.add(consulta);
                }
            }
            if(consultasMesmoDia.size()>=4){
                String respostas = JOptionPane.showInputDialog("Esse medico ja possui 4 consultas no mesmo dia, deseja entrar na lista de espera? Y/N").toUpperCase();
                if(respostas.equals("Y")){
                    medicos.remove(index);
                    Consulta consulta = new Consulta(nomeMedico,paciente.getNome(),data,hora);
                    medico.adicionarListaEspera(consulta);
                    paciente.addListaEspera(consulta);
                    int index1=0;
                    for(Paciente paciente1:pacientes){
                        if(paciente1.getNome().equals(paciente.getNome())&&paciente1.getSenha().equals(paciente.getSenha())){
                            pacientes.remove(index1);
                            paciente1.addListaEspera(consulta);
                            pacientes.add(paciente1);
                            Writer writer = null;
                            try{
                            writer=new FileWriter("pacientes.json");
                            gson.toJson(pacientes,writer);
                            writer.flush();
                            writer.close();
                            }catch(Exception e){
                                e.getMessage();
        }
                        }
                        index1=index1+1;
                    }
                    medicos.add(medico);
                    Writer writer = null;
                    try{
                        writer=new FileWriter("medicos.json");
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                    }catch(Exception e){
                            e.getMessage();
                    }
                }
                if(respostas.equals("N")){
                    String respostas2 = JOptionPane.showInputDialog("Deseja marcar a consulta para outro dia? Y/N").toUpperCase();
                    if(respostas2.equals("Y")){
                    String dataNova = JOptionPane.showInputDialog("Digite a data (formato dd/mm/aaaa)");
                    for(Consulta consulta2: consultas){
                        if(consulta2.getData().equals(dataNova)){
                            consultasNovoDia.add(consulta2);
                        }
                    }
                    if(consultasNovoDia.size()>=4){
                        JOptionPane.showMessageDialog(null, "Ola, infelizmente o medico tambem esta com a agenda lotada nesse dia","ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        int tamanho = consultas.size();
                        if(tamanho==0){
                            medicos.remove(index);
                    Consulta consulta = new Consulta(nomeMedico,paciente.getNome(),dataNova,hora);
                    medico.adicionarConsulta(consulta);
                    paciente.addListaEspera(consulta);
                    int index1=0;
                    for(Paciente paciente1:pacientes){
                        if(paciente1.getNome().equals(paciente.getNome())&&paciente1.getSenha().equals(paciente.getSenha())){
                            pacientes.remove(index1);
                            paciente1.adicionarConsulta(consulta);
                            pacientes.add(paciente1);
                            Writer writer = null;
                            try{
                            writer=new FileWriter("pacientes.json");
                            gson.toJson(pacientes,writer);
                            writer.flush();
                            writer.close();
                            }catch(Exception e){
                                e.getMessage();
        }
                        }
                        index1=index1+1;
                    }
                    medicos.add(medico);
                    Writer writer = null;
                    try{
                        writer=new FileWriter("medicos.json");
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                    }catch(Exception e){
                            e.getMessage();
                    }
                        }
                        int a =0;
                        for(Consulta consulta3: consultas){
                            if(consulta3.getHorario().equals(hora)&&consulta3.getData().equals(dataNova)){
                                JOptionPane.showMessageDialog(null, "Ola, infelizmente o medico esta com uma consulta nesse horario, se quiser altere a hora","ERRO", JOptionPane.ERROR_MESSAGE);
                                break;
                            }
                            a++;
                            if(a==tamanho){
                                medicos.remove(index);
                    Consulta consulta = new Consulta(nomeMedico,paciente.getNome(),dataNova,hora);
                    medico.adicionarConsulta(consulta);
                    paciente.adicionarConsulta(consulta);
                    int index1=0;
                    for(Paciente paciente1:pacientes){
                        if(paciente1.getNome().equals(paciente.getNome())&&paciente1.getSenha().equals(paciente.getSenha())){
                            pacientes.remove(index1);
                            paciente1.adicionarConsulta(consulta);
                            pacientes.add(paciente1);
                            Writer writer = null;
                            try{
                            writer=new FileWriter("pacientes.json");
                            gson.toJson(pacientes,writer);
                            writer.flush();
                            writer.close();
                            }catch(Exception e){
                                e.getMessage();
        }
                        }
                        index1=index1+1;
                    }
                    medicos.add(medico);
                    Writer writer = null;
                    try{
                        writer=new FileWriter("medicos.json");
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                    }catch(Exception e){
                            e.getMessage();
                    }
                    JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                    break;
                            }
                        }
                    }
                }
                }
            }
            else{
                int tamanho = consultas.size();
                if(tamanho==0){
                    Consulta consulta = new Consulta(nomeMedico,paciente.getNome(),data,hora);
                        medicos.remove(index);
                    medico.adicionarConsulta(consulta);
                    paciente.addListaEspera(consulta);
                    int index1=0;
                    for(Paciente paciente1:pacientes){
                        if(paciente1.getNome().equals(paciente.getNome())&&paciente1.getSenha().equals(paciente.getSenha())){
                            pacientes.remove(index1);
                            paciente1.adicionarConsulta(consulta);
                            pacientes.add(paciente1);
                            Writer writer = null;
                            try{
                            writer=new FileWriter("pacientes.json");
                            gson.toJson(pacientes,writer);
                            writer.flush();
                            writer.close();
                            }catch(Exception e){
                                e.getMessage();
        }
                        }
                        index1=index1+1;
                    }
                    medicos.add(medico);
                    Writer writer = null;
                    try{
                        writer=new FileWriter("medicos.json");
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                        JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                    }catch(Exception e){
                            e.getMessage();
                    }
                    continue;
                }
                int a =0;
                for(int x =0;x<consultas.size();x++){
                    Consulta consulta4 = consultas.get(x);
                    Consulta consulta = new Consulta(nomeMedico,paciente.getNome(),data,hora);
                    if(consulta4.getData().equals(data)&&consulta4.getHorario().equals(hora)){
                        JOptionPane.showMessageDialog(null, "Ola, infelizmente o medico esta com uma consulta nesse horario, se quiser altere a hora","ERRO", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    a++;
                    if(a==tamanho){
                        System.out.println("entrou");
                        medicos.remove(index);
                    medico.adicionarConsulta(consulta);
                    paciente.addListaEspera(consulta);
                    int index1=0;
                    for(Paciente paciente1:pacientes){
                        if(paciente1.getNome().equals(paciente.getNome())&&paciente1.getSenha().equals(paciente.getSenha())){
                            pacientes.remove(index1);
                            paciente1.adicionarConsulta(consulta);
                            pacientes.add(paciente1);
                            Writer writer = null;
                            try{
                            writer=new FileWriter("pacientes.json");
                            gson.toJson(pacientes,writer);
                            writer.flush();
                            writer.close();
                            }catch(Exception e){
                                e.getMessage();
        }
                        }
                        index1=index1+1;
                    }
                    medicos.add(medico);
                    Writer writer = null;
                    try{
                        writer=new FileWriter("medicos.json");
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                    }catch(Exception e){
                            e.getMessage();
                    }
                    JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                    break;
                    }
                    
                }
            }
            break;
            }
        index=index+1;
        }
        }
        Writer writer = null;
        try{
            writer = new FileWriter("usuario.json");
            gson.toJson(paciente,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> chxHora;
    private javax.swing.JTextField dataTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    private javax.swing.JTextField pesquisaTxt;
    // End of variables declaration//GEN-END:variables
}
