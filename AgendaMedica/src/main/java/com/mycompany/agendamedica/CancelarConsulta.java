/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author super
 */
public class CancelarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form CancelarConsulta
     */
    public CancelarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxHorario = new javax.swing.JComboBox<>();
        nMedicoTxt = new javax.swing.JTextField();
        nPacienteTxt = new javax.swing.JTextField();
        dataTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SISTEMA DE CANCELAMENTO DE CONSULTAS");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("CANCELAMENTO DE CONSULTAS");

        jLabel2.setText("Nome Medico:");

        jLabel3.setText("Nome Paciente:");

        jLabel4.setText("Data Consulta(formato dd/mm/aaaa):");

        jLabel5.setText("Horario:");

        boxHorario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00h", "9:00h", "10:00h", "11:00h" }));

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(nMedicoTxt))
                            .addComponent(nPacienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(dataTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32))))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boxHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nMedicoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nPacienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(dataTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(boxHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //PosLogin frame = new PosLogin();
        //frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String json="";
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("pacientes.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypePaciente = new TypeToken <ArrayList<Paciente>>(){}.getType();
        ArrayList<Paciente> pacientes = gson.fromJson(json,listTypePaciente);
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        String data = dataTxt.getText();
        String[] vetorData = data.split("(?!^)");
        boolean verificador = false;
        if(vetorData.length!=10){
            JOptionPane.showMessageDialog(null, "Ola, data inserida invalida");
        }
        int index=0;
        int index2=0;
        boolean verificador1 = false;
        boolean verificador2= false;
        for(int z=0;z<medicos.size();z++){
            Medico medico = medicos.get(z);
            ArrayList<Consulta> consultas = medico.getConsultas();
            for (int i =0;i<consultas.size();i++){
                Consulta consulta = consultas.get(i);
                if(consulta.getNomeMedico().equals(nMedicoTxt.getText().toUpperCase())&&consulta.getNomePaciente().equals(nPacienteTxt.getText().toUpperCase())&&consulta.getData().equals(dataTxt.getText())&&consulta.getHorario().equals(boxHorario.getSelectedItem())){
                    medicos.remove(index);
                    verificador=true;
                    medico.cancelarAgendamento(consulta);
                    try {
                        json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
                        Medico medicoLogin = gson.fromJson(json, Medico.class);
                        ArrayList<Consulta> teste = medicoLogin.gerarRelatorio("02/02/2005","02/02/2007");
                        Writer writer = new FileWriter("usuario.json");
                        gson.toJson(medico,writer);
                        writer.flush();
                        writer.close();
                    } catch (ExeptionNoMedico ex) {
                        System.out.println(ex.toString());
                        
                    }
                    catch (IOException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (ParseException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    } catch(Exception e){
                        System.out.println(e);
                    }
                    medicos.add(medico);
                    verificador1=true;
                }
            }
            index=index+1;
        }
        if(verificador==false){
                JOptionPane.showMessageDialog(null, "Ola, medico, paciente, data, ou horario nao encontrados, por favor, gere um relatorio");
            }
        try (Writer writer = new FileWriter("medicos.json")) {
                        String jsonNovo = gson.toJson(medicos);
                        gson.toJson(medicos,writer);
                        writer.flush();
                        writer.close();
                    } catch (IOException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
        for(int x =0;x<pacientes.size();x++){
            Paciente paciente = pacientes.get(x);
            ArrayList<Consulta> consultas = paciente.getConsultas();
            for (int i = 0;i<consultas.size();i++){
                Consulta consulta = consultas.get(i);
                if(consulta.getNomeMedico().equals(nMedicoTxt.getText().toUpperCase())&&consulta.getNomePaciente().equals(nPacienteTxt.getText().toUpperCase())&&consulta.getData().equals(dataTxt.getText())&&consulta.getHorario().equals(boxHorario.getSelectedItem())){
                    pacientes.remove(index2);
                    
                    paciente.cancelarAgendamento(consulta);
                    for(int z =0;z<pacientes.size();z++){
                        Paciente newPaciente = pacientes.get(z);
                        newPaciente.verificarListas(consulta);
                    }
                    try {
                        json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
                        Paciente pacienteLogin = gson.fromJson(json, Paciente.class);
                        ArrayList<Consulta> teste = pacienteLogin.gerarRelatorio("02/02/2005","02/02/2007");
                        Writer writer = new FileWriter("usuario.json");
                        gson.toJson(paciente,writer);
                        writer.flush();
                        writer.close();
                    } catch (ExceptionNoPaciente ex) {
                        
                        System.out.println(ex.toString());
                    }
                    catch (IOException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (ParseException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    pacientes.add(paciente);
                    verificador2=true;
                    break;
                }
            }
            index2 = index2+1;
        }
        try (Writer writer = new FileWriter("pacientes.json")) {
                        String jsonNovo = gson.toJson(pacientes);
                        gson.toJson(pacientes,writer);
                        writer.flush();
                        writer.close();
                    } catch (IOException ex) {
                        Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
        if(verificador1==true&&verificador2==true){
            JOptionPane.showMessageDialog(null, "Ola, o Cancelamento deu certo!"); 
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CancelarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxHorario;
    private javax.swing.JTextField dataTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nMedicoTxt;
    private javax.swing.JTextField nPacienteTxt;
    // End of variables declaration//GEN-END:variables
}
