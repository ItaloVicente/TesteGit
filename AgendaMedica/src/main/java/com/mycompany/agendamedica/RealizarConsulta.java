/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author super
 */
public class RealizarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form RealizarConsulta
     */
    public RealizarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dataRelatorioTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblEscolha = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Realizar consulta");
        setMaximumSize(new java.awt.Dimension(822, 630));
        setMinimumSize(new java.awt.Dimension(822, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jtConsultas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medico", "Paciente", "Data", "Horario"
            }
        ));
        jtConsultas.getTableHeader().setResizingAllowed(false);
        jtConsultas.getTableHeader().setReorderingAllowed(false);
        jtConsultas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtConsultasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtConsultas);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 160, 719, 381);

        jLabel1.setText("Digite a data atual (formato dd/mm/aaaa):");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(210, 50, 240, 16);

        dataRelatorioTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataRelatorioTxtActionPerformed(evt);
            }
        });
        getContentPane().add(dataRelatorioTxt);
        dataRelatorioTxt.setBounds(480, 50, 138, 22);

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(380, 560, 80, 23);

        jButton2.setText("Ok");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(250, 560, 72, 23);

        lblEscolha.setText("Escolha uma consulta:");
        getContentPane().add(lblEscolha);
        lblEscolha.setBounds(210, 90, 230, 16);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar);
        btnCancelar.setBounds(510, 560, 76, 23);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Sistema de realizacao de consultas");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(256, 6, 270, 31);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, -10, 820, 760);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dataRelatorioTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataRelatorioTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataRelatorioTxtActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        lblEscolha.setVisible(false);
        String json = "";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Medico medico = gson.fromJson(json, Medico.class);
            for(int i =0;i<medico.getConsultas().size();i++){
                Consulta consulta = medico.getConsultas().get(i);
                DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                Object[] dados = {consulta.getNomeMedico(),consulta.getNomePaciente(),consulta.getData(),consulta.getHorario()};
                dtmConsultas.addRow(dados);
            }
        } catch (IOException ex) {
            Logger.getLogger(PosLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String dataRelatorio = dataRelatorioTxt.getText();
        String[] vetorData = dataRelatorio.split("(?!^)");
        if(vetorData.length!=10){
            JOptionPane.showMessageDialog(null, "Ola, datas inseridas invalidas");
        }
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index5 = table.getRowCount();
        for(int x=0;x<index5;x++){
            System.out.println(x);
            table.removeRow(0);
        }
        lblEscolha.setVisible(true);
        String json = "";
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Medico medico = gson.fromJson(json, Medico.class);
            for(int i =0;i<medico.getConsultas().size();i++){
                Consulta consulta = medico.getConsultas().get(i);
                if(consulta.getData().equals(dataRelatorioTxt.getText())){
                DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
                Object[] dados = {consulta.getNomeMedico(),consulta.getNomePaciente(),consulta.getData(),consulta.getHorario()};
                dtmConsultas.addRow(dados);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(PosLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jtConsultas.getSelectedRow();
        DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
        String descricao = JOptionPane.showInputDialog("Insira a descricao da Consulta");
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String json="";
        try {
            json = String.join(" ",Files.readAllLines(Paths.get("pacientes.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        String json2="";
        try {
            json2 = String.join(" ",Files.readAllLines(Paths.get("medicos.json"),StandardCharsets.UTF_8));
        } catch (IOException ex) {
            Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.lang.reflect.Type listTypePaciente = new TypeToken <ArrayList<Paciente>>(){}.getType();
        ArrayList<Paciente> pacientes = gson.fromJson(json,listTypePaciente);
        java.lang.reflect.Type listTypeMedico = new TypeToken <ArrayList<Medico>>(){}.getType();
        ArrayList<Medico> medicos = gson.fromJson(json2, listTypeMedico);
        String json3 = "";
        try {
            json3 = String.join(" ",Files.readAllLines(Paths.get("usuario.json"),StandardCharsets.UTF_8));
            Medico medico = gson.fromJson(json3, Medico.class);
        } catch(Exception e){
            e.getMessage();
        }
        Consulta consultaRealizada;
        Medico medicoUsuario = new Medico("","","");
        int index=0;
        int index2=0;
        int index3=0;
        int index4=0;
        for(Medico medico2 : medicos){
            ArrayList<Consulta> consultas = medico2.getConsultas();
            for(int i =0;i<consultas.size();i++){
                Consulta consulta = consultas.get(i);
                String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
                String nomePaciente = (String) dtmConsultas.getValueAt(row,1);
                String data  = (String) dtmConsultas.getValueAt(row,2);
                String horario = (String) dtmConsultas.getValueAt(row, 3);
                if(consulta.getNomeMedico().equals(nomeMedico)&&
                        consulta.getNomePaciente().equals(nomePaciente)&&consulta.getData().equals(data)&&
                        consulta.getHorario().equals(horario)){
                    
                    try {
                        System.out.println("entrou0");
                        medicos.remove(index);
                        consultaRealizada = consulta;
                        medico2.realizarConsulta(consulta);
                        /*String notaS = JOptionPane.showInputDialog("Avalizacao do atendimento");
                        double nota = Double.parseDouble(notaS);
                        medico2.adicionarNota(nota);*/
                        medicoUsuario=medico2;
                        medicos.add(medico2);
                        
                    } catch (Exception ex) {
                        System.out.println("nao entrou0");
                        Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    } 
                }
             
            }
            index=index+1;
        }
        for(int y=0;y<medicos.size();y++){
            Medico medico3=medicos.get(y);
            ArrayList<Consulta> consultas3 = medico3.getListaEspera();
            for(int u=0;u<consultas3.size();u++){
                
                Consulta consulta3= consultas3.get(u);
                String dataBate = (String) dtmConsultas.getValueAt(row,2);
                String horaBate = (String) dtmConsultas.getValueAt(row, 3);
                if(consulta3.getData().equals(dataBate)&&consulta3.getHorario().equals(horaBate)){
                    System.out.println("entrou");
                    try {
                        
                        medicos.remove(index3);
                        consultaRealizada = consulta3;
                        medico3.removerListaEspera(consultaRealizada);
                        medicos.add(medico3);
                        
                    } catch (Exception ex) {
                        System.out.println("nao entrou");
                        Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
            index3=index+1;
        }
        for(int z = 0;z<pacientes.size();z++){
            Paciente paciente2 = pacientes.get(z);
            ArrayList<Consulta> consultas2 = paciente2.getConsultas();
            for(int i =0;i<consultas2.size();i++){
                Consulta consulta2 = consultas2.get(i);
                String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
                String nomePaciente = (String) dtmConsultas.getValueAt(row,1);
                String data  = (String) dtmConsultas.getValueAt(row,2);
                String horario = (String) dtmConsultas.getValueAt(row, 3);
                if(consulta2.getNomeMedico().equals(nomeMedico)&&
                        consulta2.getNomePaciente().equals(nomePaciente)&&consulta2.getData().equals(data)&&
                        consulta2.getHorario().equals(horario)){
                    
                    try {
                        System.out.println("entrou2");
                        pacientes.remove(index2);
                        consultaRealizada = consulta2;
                        paciente2.realizarConsulta(consulta2);
                        consultaRealizada.setDescricao(descricao);
                        paciente2.addAvaliarConsulta(consultaRealizada);
                        pacientes.add(paciente2);
                        
                    } catch (Exception ex) {
                        System.out.println("nao entrou 2");
                        Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            }
            index2=index2+1;
        }
        for(int t=0;t<pacientes.size();t++){
            Paciente paciente4 = pacientes.get(t);
            ArrayList<Consulta> consultas4 = paciente4.getListaEspera();
            for(int u=0;u<consultas4.size();u++){
                Consulta consulta4= consultas4.get(u);
                
                String dataBate = (String) dtmConsultas.getValueAt(row,2);
                String horaBate = (String) dtmConsultas.getValueAt(row, 3);
                if(consulta4.getData().equals(dataBate)&&consulta4.getHorario().equals(horaBate)){
                    System.out.println("entrou");
                    try {
                        
                        pacientes.remove(index4);
                        consultaRealizada = consulta4;
                        paciente4.removerListaEspera(consultaRealizada);
                        pacientes.add(paciente4);
                        
                    } catch (Exception ex) {
                        System.out.println("nao entrou");
                        Logger.getLogger(RealizarConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }
            index4=index4+1;
        }
        
        Writer writer = null;
        try{
            writer=new FileWriter("medicos.json");
            gson.toJson(medicos,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        try{
            writer=new FileWriter("pacientes.json");
            gson.toJson(pacientes,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        try{
            writer = new FileWriter("usuario.json");
            gson.toJson(medicoUsuario,writer);
            writer.flush();
            writer.close();
        }catch(Exception e){
            e.getMessage();
        }
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index5 = table.getRowCount();
        for(int x=0;x<index5;x++){
            System.out.println(x);
            table.removeRow(0);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jtConsultasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtConsultasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtConsultasMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealizarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealizarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealizarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealizarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RealizarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JTextField dataRelatorioTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    private javax.swing.JLabel lblEscolha;
    // End of variables declaration//GEN-END:variables
}
